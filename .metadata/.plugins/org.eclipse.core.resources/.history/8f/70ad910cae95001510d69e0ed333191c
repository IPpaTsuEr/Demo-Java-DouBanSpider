package spider;



import org.htmlparser.Node;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasAttributeFilter;
import org.htmlparser.filters.HasParentFilter;
import org.htmlparser.filters.TagNameFilter;
import org.htmlparser.tags.LinkTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;

public class CommentAnalysis extends AnalysisBase implements Runnable {
	private Node nextPageNode;
	private String nextString;
	private LinkTag nextLink;
	private LinkedTempList<CommentStorage> cl;
	private URLList cul;
	private IOBase IO;
	CommentAnalysis(URLList cul,LinkedTempList<CommentStorage> cl,IOBase IO){
		this.cl=cl;
		this.cul=cul;
		this.IO=IO;
	}
	
	public void run(){
		while(true){
			if(stop){break;}
			if(sleep){try {Thread.sleep(5000);} catch (InterruptedException e) {}}
			else if(cul.size()>0){
				IO.print("comment url---"+cul.get(0));
				getComments(cul.get(0));
				cul.remove(0);
			}
			else if(cul.esize()>0){
			}
			if(!sleep)try {Thread.sleep(holdTime+random(18,24)*100);} catch (InterruptedException e) {IO.error("Comment 线程挂起失败！");}
		}
	}
	
	public void getNext() {
		try {
			parser.reset();
			nextPageNode = (Node) parser.extractAllNodesThatMatch(new AndFilter(new TagNameFilter("a"),new HasAttributeFilter("class","next"))).elementAt(0);
			nextLink=(LinkTag)nextPageNode;
			if(nextLink!=null){
				nextString=getMovieCommentAddress()+nextLink.getAttribute("href").replaceAll("amp;", "");
			}
			else{
				nextString=getMovieCommentAddress()+"?start=999999&limit=-20&sort=new_score";
			}
		} catch (Exception e) {
				IO.error("获取"+movieId+"的下一页Comment（短评）地址时出错，详细信息："+e);
			}
	}
	public void getComments(String commentsPage){
		
		setMovieId(commentsPage);
		setParser(commentsPage,ComAna);
		
		 if(parser==null){
			 cul.eadd(nextString);
			 IO.print(movieId+"的短评页为空。");
			 return;
		 }
		
		int totalitem=0;
		totalitem=getTotalItem(parser);
		if (totalitem<=0){ 
			cul.eadd(nextString); 
			IO.print(movieId+"的短评数为0.");
			return;
		}
		if (totalitem>20){
				while(true){
						try {
							IO.print("Comment ing...");
							showComments();
						} catch (Exception e1) {
							cul.eadd(nextString);
							IO.error("获取"+movieId+"的短评信息出错，详细信息："+e1);
						}
						getNext();
						if(getNextItem(nextString,getMovieCommentAddress())>totalitem){break;}
						try {Thread.sleep(holdTime*2+random(13,28*100));} catch (InterruptedException e) {IO.error("Comment 线程挂起失败！");}
						setParser(nextString,ComAna);
				}
			}
		else if(totalitem>0){
			try {Thread.sleep(holdTime*2+random(13,28*100));} catch (InterruptedException e) {IO.error("Comment 线程挂起失败！");}
				try {
					IO.print("Comment ing...");
					showComments();
				} catch (Exception e) {
					cul.eadd(nextString);
					IO.error("获取"+movieId+"的短评信息出错，详细信息："+e);
				}
		}
	}
	
	public void showComments() throws ParserException{
		parser.reset();
		NodeList pinglunList=null;
		NodeList pinglunDirList=null;


		pinglunList = parser.extractAllNodesThatMatch(new AndFilter(new TagNameFilter("span"),new HasAttributeFilter("class","comment-info")));
		parser.reset();
		pinglunDirList=parser.extractAllNodesThatMatch(new AndFilter(new TagNameFilter("p"),new HasParentFilter(new HasAttributeFilter("class","comment"))));
		if(null!=pinglunList){
			for(int i=0;i<pinglunList.size();i++){
				Node node=(Node) pinglunList.elementAt(i);
				CommentStorage cm=new CommentStorage();
				cm.setID(movieId);
				cm.setUserName(node.getChildren().elementAt(1).toPlainTextString());
				String vote=node.getChildren().elementAt(3).getText();
				int score=0;
				if(vote.indexOf("10")>0){score=1;}
				else if(vote.indexOf("20")>0){score=2;}
				else if(vote.indexOf("30")>0){score=3;}
				else if(vote.indexOf("40")>0){score=4;}
				else if(vote.indexOf("50")>0){score=5;}
				else{score=-1;}
				cm.setScore(score);
				if(node.getChildren().elementAt(5)!=null){
					cm.setDate(node.getChildren().elementAt(5).toPlainTextString().replaceAll("\n", "").replaceAll(" ",""));}
				else{
					cm.setDate(node.getChildren().elementAt(3).toPlainTextString().replaceAll("\n", "").replaceAll(" ",""));}
				if(null!=pinglunDirList){
					Node plnode=(Node)pinglunDirList.elementAt(i);
					cm.setComment(plnode.toPlainTextString().replaceAll("\n", ""));}
				else{
					cm.setComment("");}
				if(cm!=null)cl.add(cm);
			}
		}
	}
}
